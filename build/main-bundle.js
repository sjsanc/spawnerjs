/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/classes/spawner.ts":
/*!********************************!*\
  !*** ./src/classes/spawner.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports) {


//  .d8888.d8888b. .d8b. db   d8b   dbd8b   dbd88888bd8888b.   d88b.d8888.
//  88'  YP88  `8Dd8' `8b88   I8I   88888o  8888'    88  `8D   `8P'88'  YP
//  `8bo.  88oodD'88ooo8888   I8I   8888V8o 8888ooooo88oobY'    88 `8bo.
//    `Y8b.88~~~  88~~~88Y8   I8I   8888 V8o8888~~~~~88`8b      88   `Y8b.
//  db   8D88     88   88`8b d8'8b d8'88  V88888.    88 `88.db. 88 db   8D
//  `8888Y'88     YP   YP `8b8' `8d8' VP   V8PY88888P88   YDY8888P `8888Y'
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SpawnerStore = exports.SpawnChain = exports.Spawner = void 0;
// NOTES
// Conditional Rendering -- currently half-scaffolded.
// Not sure if it's possible to do realistically without a Shadow DOM implementation
// Current aim is to insert placeholder References where an element that has failed
// it's condition should go, then insert/replace using the placeholder index on
// condition update.
// =============================================================================== //
// Spawner
// =============================================================================== //
var Spawner = /** @class */ (function () {
    function Spawner(rootEntry) {
        this._refStore = []; // array for storing existing referneces
        this._rootEntry = rootEntry; // document entrypoint
        this._spawnerRootContext = null; // unusued
        this._spawnerRootBuildList = []; // the flat root SpawnChain
    }
    // SpawnStore intialiser
    Spawner.prototype.store = function (initialState) {
        var store = new SpawnerStore(this, initialState);
        this._stateStore = store;
        return store;
    };
    Spawner.prototype.create = function (props, attributes) {
        if (attributes == undefined) {
            return new SpawnChain(this, props, {}, this._rootEntry);
        }
        else {
            return new SpawnChain(this, props, attributes, this._rootEntry);
        }
    };
    Spawner.prototype._redraw = function () {
        console.log(this._spawnerRootBuildList);
        console.log(this._refStore);
        // this._rootEntry.innerText = "";
        // this._build(this._spawnerRootBuildList, this._rootEntry);
    };
    // Saves the reference between a Store prop and DOM element
    Spawner.prototype._saveRef = function (ref) {
        this._refStore.push(ref);
    };
    // Builds the DOM and returns a root element
    Spawner.prototype._build = function (buildList, root) {
        buildList.forEach(function (x) {
            if (x.dataset.display !== "0") {
                root.append(x);
            }
        });
        return root;
    };
    // Brings compiled SpawnChains from their host class into the Spawner buildchain
    Spawner.prototype._saveToRootBuildList = function (element) {
        this._spawnerRootBuildList = __spreadArray(__spreadArray([], this._spawnerRootBuildList), [element]);
    };
    Spawner.prototype.render = function () {
        this._rootEntry.append(this._spawnerRootContext);
    };
    return Spawner;
}());
exports.Spawner = Spawner;
// =============================================================================== //
// SpawnChain
// =============================================================================== //
var SpawnChain = /** @class */ (function () {
    function SpawnChain(parent, conditions, attributes, rootInsertion) {
        this._parentSpawner = parent;
        this._buildList = [];
        this._rootInsertion = rootInsertion;
        this._rootContext = this._create(conditions, attributes);
    }
    // Create an element
    SpawnChain.prototype._create = function (conditions, attributes) {
        var _a;
        var _this = this;
        if (attributes == undefined)
            attributes = {};
        var element = attributes["type"]
            ? document.createElement(attributes["type"])
            : document.createElement("div");
        var statefulAttributes = [];
        // Build element and create any references between state and attributes
        for (var _i = 0, _b = Object.entries(attributes); _i < _b.length; _i++) {
            var _c = _b[_i], key = _c[0], val = _c[1];
            if (typeof val == "object") {
                var stateName = Object.keys(val)[0];
                statefulAttributes.push((_a = {}, _a[key] = stateName, _a)); // { innerText: text }
                this._parentSpawner._saveRef({
                    stateName: stateName,
                    attr: key,
                    element: element,
                });
                element[key] = Object.values(val)[0];
            }
            else {
                element[key] = val;
            }
        }
        var checker = function (arr) {
            return arr.every(function (v) { return _this._parentSpawner._stateStore.getState(v) === true; });
        };
        // Check that all conditions eval to true;
        // if(checker(conditions) == false) {
        //     element.dataset.display = "0"
        // } else {
        conditions.forEach(function (condition) {
            var stateName = Object.keys(condition)[0];
            _this._parentSpawner._saveRef({
                stateName: stateName,
                renderDependency: true,
                element: element,
            });
        });
        this._buildList.push(element); // save this particular element
        this._parentSpawner._saveToRootBuildList(element);
        return element;
    };
    SpawnChain.prototype.append = function (conditions, attributes) {
        var _this = this;
        if (attributes.length == undefined) {
            var element = this._create(conditions, attributes);
            this._buildList.push(element);
            this._rootContext.append(element);
        }
        else {
            attributes.forEach(function (x) {
                var element = _this._create(conditions, x);
                _this._buildList.push(element);
                _this._rootContext.append(element);
            });
        }
        return this;
    };
    // Takes a SpawnChain and joins it to the parent one
    SpawnChain.prototype.nest = function (spawnChain) {
        this._rootContext.append(spawnChain._rootContext);
        this._buildList = __spreadArray(__spreadArray([], this._buildList), spawnChain._buildList);
        return this;
    };
    SpawnChain.prototype.end = function () {
        if (this._parentSpawner._spawnerRootContext == null) {
            this._parentSpawner._spawnerRootContext = this._rootContext;
        }
        else {
            this._parentSpawner._spawnerRootContext.append(this._rootContext);
        }
    };
    // Return the built SpawnChain
    SpawnChain.prototype.return = function () {
        return this._parentSpawner._build(this._buildList, this._rootContext);
    };
    return SpawnChain;
}());
exports.SpawnChain = SpawnChain;
// =============================================================================== //
// SpawnerStore
// =============================================================================== //
var SpawnerStore = /** @class */ (function () {
    function SpawnerStore(parent, initialState) {
        this._proxySetHandler = function (obj, prop, value) {
            obj[prop] = value;
            // this._reRender();
            return true;
        };
        this._state = {};
        this._parent = parent;
        var state = new Proxy(this._state, {
            get: this._proxyGetHandler,
            set: this._proxySetHandler,
        });
        // set the initial State
        Object.entries(initialState).map(function (x) {
            state[x[0]] = x[1];
        });
        this.state = state;
        return this;
    }
    SpawnerStore.prototype._proxyGetHandler = function (obj, prop, receiver) {
        var _a;
        return _a = {}, _a[prop] = obj[prop], _a;
    };
    SpawnerStore.prototype.createState = function (stateObj) {
        var _a = Object.entries(stateObj)[0], key = _a[0], val = _a[1];
        this.state[key] = val;
    };
    SpawnerStore.prototype.setState = function (stateObj) {
        var _this = this;
        var _a = Object.entries(stateObj)[0], key = _a[0], val = _a[1];
        if (key == undefined) {
            throw ReferenceError("Could not find state with key '" + key + "'. Check for typos.");
        }
        else {
            var currentVal = Object.values(this.state[key])[0];
            if (typeof val !== "object") {
                if (typeof currentVal !== typeof val) {
                    throw new TypeError("Cannot assign variable of type '" + typeof val + "' to state container of type '" + typeof currentVal + "'. State type cannot be mutated after initialising.");
                }
                else {
                    this.state[key] = val;
                    this._parent._refStore.forEach(function (ref) {
                        if (ref.stateName == key) {
                            ref.element[ref.attr] = Object.values(_this.state[key])[0];
                        }
                    });
                }
            }
        }
    };
    SpawnerStore.prototype.computeState = function (stateObj, callback) {
        var _a;
        var _b = Object.entries(stateObj)[0], key = _b[0], val = _b[1];
        this.setState((_a = {}, _a[key] = callback(val), _a));
    };
    SpawnerStore.prototype.getState = function (stateObj) {
        var _a = Object.entries(stateObj)[0], key = _a[0], val = _a[1];
        return val;
    };
    SpawnerStore.prototype.snapshot = function () {
        return this._state;
    };
    return SpawnerStore;
}());
exports.SpawnerStore = SpawnerStore;
//# sourceMappingURL=data:application/json;base64,

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
var exports = __webpack_exports__;
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
var spawner_1 = __webpack_require__(/*! ./classes/spawner */ "./src/classes/spawner.ts");
var spawner = new spawner_1.Spawner(document.getElementById("app"));
var store = spawner.store({
    text: "hi!",
    isVisible: false,
});
store.createState({ number: 0 });
var state = store.state;
spawner
    .create([])
    .append([state.isVisible], {
    type: "div",
    style: "border: 2px solid black;",
    innerText: state.text,
})
    .append([], { type: "p", innerText: state.number })
    .append([], {
    innerText: "Click me",
    type: "button",
    onclick: function () {
        store.setState({ text: "Changed" });
    },
})
    .append([], { innerText: "I'm some boring text", type: "p" })
    .nest(spawner.create([], { type: "ul" }).append([], ["List 1", "List 2", "List 3"].map(function (li) { return ({
    type: "li",
    innerText: li,
}); })))
    .end();
var cb = function (state) {
    return state + 1;
};
store.computeState(state.number, cb);
setInterval(function () {
    store.computeState(state.number, cb);
}, 1000);
spawner._redraw();
spawner.render();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBNEM7QUFFNUMsSUFBTSxPQUFPLEdBQUcsSUFBSSxpQkFBTyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUU1RCxJQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO0lBQzFCLElBQUksRUFBRSxLQUFLO0lBQ1gsU0FBUyxFQUFFLEtBQUs7Q0FDakIsQ0FBQyxDQUFDO0FBRUgsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRXpCLElBQUEsS0FBSyxHQUFLLEtBQUssTUFBVixDQUFXO0FBRXhCLE9BQU87S0FDSixNQUFNLENBQUMsRUFBRSxDQUFDO0tBQ1YsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFO0lBQ3pCLElBQUksRUFBRSxLQUFLO0lBQ1gsS0FBSyxFQUFFLDBCQUEwQjtJQUNqQyxTQUFTLEVBQUUsS0FBSyxDQUFDLElBQUk7Q0FDdEIsQ0FBQztLQUNELE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7S0FDbEQsTUFBTSxDQUFDLEVBQUUsRUFBRTtJQUNWLFNBQVMsRUFBRSxVQUFVO0lBQ3JCLElBQUksRUFBRSxRQUFRO0lBQ2QsT0FBTyxFQUFFO1FBQ1AsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7Q0FDRixDQUFDO0tBQ0QsTUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxzQkFBc0IsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUM7S0FDNUQsSUFBSSxDQUNILE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxDQUN2QyxFQUFFLEVBQ0YsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFDLEVBQUUsSUFBSyxPQUFBLENBQUM7SUFDMUMsSUFBSSxFQUFFLElBQUk7SUFDVixTQUFTLEVBQUUsRUFBRTtDQUNkLENBQUMsRUFIeUMsQ0FHekMsQ0FBQyxDQUNKLENBQ0Y7S0FDQSxHQUFHLEVBQUUsQ0FBQztBQUVULElBQU0sRUFBRSxHQUFHLFVBQUMsS0FBSztJQUNmLE9BQU8sS0FBSyxHQUFHLENBQUMsQ0FBQztBQUNuQixDQUFDLENBQUM7QUFFRixLQUFLLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFFckMsV0FBVyxDQUFDO0lBQ1YsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUVULE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUVsQixPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMifQ==
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,