/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/spawner.ts":
/*!************************!*\
  !*** ./src/spawner.ts ***!
  \************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Spawner = void 0;
var SpawnerElement = /** @class */ (function () {
    function SpawnerElement() {
    }
    return SpawnerElement;
}());
var Spawner = /** @class */ (function () {
    function Spawner() {
        this._context = null;
        this._buildList = [];
        this._store = []; // change to Ref store
        this._proxyTarget = {};
        this._proxy = new Proxy(this._proxyTarget, {});
        // Implement some sort of state, to allow for conditional rendering
    }
    Spawner.prototype.create = function (options) {
        this._context = null;
        this._context = this._create(options);
        return this;
    };
    Spawner.prototype._create = function (options) {
        var element = options["type"]
            ? document.createElement(options["type"])
            : document.createElement("div");
        Object.entries(options).map(function (_a) {
            var key = _a[0], val = _a[1];
            key !== "type" ? (element[key.toString()] = val) : null;
        });
        if (typeof options["ref"] == "string") {
            var reference = options["ref"];
            this._store.push({ reference: reference, element: element });
        }
        return element;
    };
    Spawner.prototype.insertInto = function (target) {
        var _this = this;
        if (this._buildList.length > 0) {
            this._buildList.forEach(function (x) {
                _this._context.append(x);
            });
        }
        target.append(this._context);
        var tempContext = this._context;
        this._context = null;
        this._buildList = [];
        return tempContext;
    };
    Spawner.prototype.append = function (options) {
        this._buildList.push(this._create(options));
        return this;
    };
    Spawner.prototype.get = function (ref) {
        var element = this._getRef(ref);
        if (this._getRef(ref)) {
            return element.element;
        }
        else {
            return undefined;
        }
    };
    Spawner.prototype._getRef = function (ref) {
        return this._store.find(function (x) { return x.reference == ref; }) || null;
    };
    Spawner.prototype.register = function (cb, ref) {
        var elem = typeof ref == "string" ? this._getRef(ref).element : ref;
        if (elem !== "undefined") {
            var observer = new MutationObserver(function (mutations) {
                mutations.forEach(function (mutation) {
                    cb();
                });
            });
            observer.observe(elem, {
                characterData: false,
                attributes: true,
                childList: true,
                subtree: false,
            });
        }
    };
    return Spawner;
}());
exports.Spawner = Spawner;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bhd25lci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zcGF3bmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUtBO0lBQUE7SUFHQSxDQUFDO0lBQUQscUJBQUM7QUFBRCxDQUFDLEFBSEQsSUFHQztBQUVEO0lBT0U7UUFDRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFDLHNCQUFzQjtRQUN4QyxJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFL0MsbUVBQW1FO0lBQ3JFLENBQUM7SUFFRCx3QkFBTSxHQUFOLFVBQU8sT0FBNkI7UUFDbEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3RDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVPLHlCQUFPLEdBQWYsVUFBZ0IsT0FBNkI7UUFDM0MsSUFBTSxPQUFPLEdBQWdCLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDMUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3pDLENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRWxDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUMsRUFBVTtnQkFBVCxHQUFHLFFBQUEsRUFBRSxHQUFHLFFBQUE7WUFDcEMsR0FBRyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENB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

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
var exports = __webpack_exports__;
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
var spawner_1 = __webpack_require__(/*! ./spawner */ "./src/spawner.ts");
// const newEl = new U.element("div", { innerText: "LOL" }).append(document.body);
var spawner = new spawner_1.Spawner();
spawner
    .create({ innerText: "I'm a div" })
    .append({ innerText: "I'm a header", type: "h1" })
    .append({ innerText: "I'm some boring text", type: "p", ref: "pRef" })
    .append({
    innerText: "Click Me",
    type: "button",
    onclick: function () {
        spawner.get("pRef").innerText = "I've changed!";
    },
})
    .insertInto(document.body);
spawner.register(function () {
    console.log("Something about this element changed!");
}, "pRef");
spawner.get("pRef").classList.add("cls"); // "Something about..."
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBb0M7QUFFcEMsa0ZBQWtGO0FBRWxGLElBQU0sT0FBTyxHQUFHLElBQUksaUJBQU8sRUFBRSxDQUFDO0FBRTlCLE9BQU87S0FDSixNQUFNLENBQUMsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLENBQUM7S0FDbEMsTUFBTSxDQUFDLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUM7S0FDakQsTUFBTSxDQUFDLEVBQUUsU0FBUyxFQUFFLHNCQUFzQixFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDO0tBQ3JFLE1BQU0sQ0FBQztJQUNOLFNBQVMsRUFBRSxVQUFVO0lBQ3JCLElBQUksRUFBRSxRQUFRO0lBQ2QsT0FBTyxFQUFFO1FBQ1AsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLEdBQUcsZUFBZSxDQUFDO0lBQ2xELENBQUM7Q0FDRixDQUFDO0tBQ0QsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUU3QixPQUFPLENBQUMsUUFBUSxDQUFDO0lBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO0FBQ3ZELENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUVYLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHVCQUF1QiJ9
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,