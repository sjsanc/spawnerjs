/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/classes/spawner.ts":
/*!********************************!*\
  !*** ./src/classes/spawner.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports) {


var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SpawnerStore = exports.SpawnChain = exports.Spawner = void 0;
var Spawner = /** @class */ (function () {
    function Spawner(rootEntry) {
        this._refStore = []; // array for storing existing referneces
        this._rootEntry = rootEntry; // document entrypoint
        this._spawnerRootContext = null; // unusued
        this._spawnerRootBuildList = []; // the flat root SpawnChain
    }
    // SpawnStore intialiser
    Spawner.prototype.store = function (initialState) {
        return new SpawnerStore(this, initialState);
    };
    Spawner.prototype.create = function (props, options) {
        if (options !== undefined) {
            return new SpawnChain(this, props, {}, this._rootEntry);
        }
        else {
            return new SpawnChain(this, props, options, this._rootEntry);
        }
    };
    // Saves the reference between a Store prop and DOM element
    Spawner.prototype._saveRef = function (ref) {
        this._refStore.push(ref);
    };
    // Builds the DOM and returns a root element
    Spawner.prototype._build = function (buildList, root) {
        buildList.forEach(function (x) {
            root.append(x);
        });
        return root;
    };
    // Brings compiled SpawnChains from their host class into the Spawner buildchain
    Spawner.prototype._saveToRootBuildList = function (element) {
        this._spawnerRootBuildList = __spreadArray(__spreadArray([], this._spawnerRootBuildList), [element]);
    };
    return Spawner;
}());
exports.Spawner = Spawner;
var SpawnChain = /** @class */ (function () {
    function SpawnChain(parent, conditions, attributes, rootInsertion) {
        this._parentSpawner = parent;
        this._buildList = [];
        this._rootInsertion = rootInsertion;
        this._rootContext = this._create(conditions, attributes);
    }
    // Create an element
    SpawnChain.prototype._create = function (conditions, attributes) {
        var _a;
        if (attributes == undefined)
            attributes = {};
        var element = attributes["type"]
            ? document.createElement(attributes["type"])
            : document.createElement("div");
        var statefulAttributes = [];
        for (var _i = 0, _b = Object.entries(attributes); _i < _b.length; _i++) {
            var _c = _b[_i], key = _c[0], val = _c[1];
            if (typeof val == "object") {
                var stateName = Object.keys(val)[0];
                statefulAttributes.push((_a = {}, _a[key] = stateName, _a)); // { innerText: text }
                this._parentSpawner._saveRef({
                    stateName: stateName,
                    attr: key,
                    element: element,
                });
                element[key] = Object.values(val)[0]; // build element
            }
            else {
                element[key] = val;
            }
        }
        this._parentSpawner._saveToRootBuildList(element);
        return element;
    };
    SpawnChain.prototype.append = function (propList, attributes) {
        var _this = this;
        if (attributes.length == undefined) {
            this._buildList.push(this._create(propList, attributes));
        }
        else {
            attributes.forEach(function (x) {
                _this._buildList.push(_this._create(propList, x));
            });
        }
        return this;
    };
    // Compiles a buildList into a root element
    SpawnChain.prototype._build = function (buildList, rootElement) {
        buildList.forEach(function (x) {
            rootElement.append(x);
        });
        return rootElement;
    };
    // Takes a SpawnChain and joins it to the parent one
    SpawnChain.prototype.nest = function (spawnChain) {
        this._buildList.push(this._build(spawnChain._buildList, spawnChain._rootContext));
        return this;
    };
    // Append the build SpawnChain at the passed argument
    SpawnChain.prototype.renderAt = function (insertionPoint) {
        var builtSpawnChain = this._build(this._buildList, this._rootContext);
        insertionPoint.append(builtSpawnChain);
    };
    // Append the built SpawnChain at the defined Spawner rootInsertion
    SpawnChain.prototype.render = function () {
        var builtSpawnChain = this._build(this._buildList, this._rootContext);
        this._rootInsertion.append(builtSpawnChain);
    };
    // Return the built SpawnChain
    SpawnChain.prototype.return = function () {
        return this._build(this._buildList, this._rootContext);
    };
    return SpawnChain;
}());
exports.SpawnChain = SpawnChain;
var SpawnerStore = /** @class */ (function () {
    function SpawnerStore(parent, initialState) {
        this._proxySetHandler = function (obj, prop, value) {
            obj[prop] = value;
            // this._reRender();
            return true;
        };
        this._state = {};
        this._parent = parent;
        var state = new Proxy(this._state, {
            get: this._proxyGetHandler,
            set: this._proxySetHandler,
        });
        // set the initial State
        Object.entries(initialState).map(function (x) {
            state[x[0]] = x[1];
        });
        this.state = state;
        return this;
    }
    SpawnerStore.prototype._proxyGetHandler = function (obj, prop, receiver) {
        var _a;
        return _a = {}, _a[prop] = obj[prop], _a;
    };
    SpawnerStore.prototype.createState = function (stateObj) {
        var _a = Object.entries(stateObj)[0], key = _a[0], val = _a[1];
        this.state[key] = val;
    };
    SpawnerStore.prototype.setState = function (stateObj) {
        var _this = this;
        var _a = Object.entries(stateObj)[0], key = _a[0], val = _a[1];
        if (key == undefined) {
            throw ReferenceError("Could not find state with key '" + key + "'. Check for typos.");
        }
        else {
            var currentVal = Object.values(this.state[key])[0];
            if (typeof val !== "object") {
                if (typeof currentVal !== typeof val) {
                    throw new TypeError("Cannot assign variable of type '" + typeof val + "' to state container of type '" + typeof currentVal + "'. State type cannot be mutated after initialising.");
                }
                else {
                    this.state[key] = val;
                    this._parent._refStore.forEach(function (ref) {
                        if (ref.stateName == key) {
                            ref.element[ref.attr] = Object.values(_this.state[key])[0];
                        }
                    });
                }
            }
        }
    };
    SpawnerStore.prototype.computeState = function (stateObj, callback) {
        var _a;
        var _b = Object.entries(stateObj)[0], key = _b[0], val = _b[1];
        this.setState((_a = {}, _a[key] = callback(val), _a));
    };
    SpawnerStore.prototype.getState = function (stateObj) {
        var _a = Object.entries(stateObj)[0], key = _a[0], val = _a[1];
        return val;
    };
    SpawnerStore.prototype.snapshot = function () {
        return this._state;
    };
    return SpawnerStore;
}());
exports.SpawnerStore = SpawnerStore;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bhd25lci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGFzc2VzL3NwYXduZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtJQU1FLGlCQUFZLFNBQVM7UUFDbkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsQ0FBQyx3Q0FBd0M7UUFDN0QsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUMsQ0FBQyxzQkFBc0I7UUFDbkQsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxDQUFDLFVBQVU7UUFDM0MsSUFBSSxDQUFDLHFCQUFxQixHQUFHLEVBQUUsQ0FBQyxDQUFDLDJCQUEyQjtJQUM5RCxDQUFDO0lBRUQsd0JBQXdCO0lBQ3hCLHVCQUFLLEdBQUwsVUFBTSxZQUFpQztRQUNyQyxPQUFPLElBQUksWUFBWSxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBS0Qsd0JBQU0sR0FBTixVQUFPLEtBQVksRUFBRSxPQUE2QjtRQUNoRCxJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUU7WUFDekIsT0FBTyxJQUFJLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDekQ7YUFBTTtZQUNMLE9BQU8sSUFBSSxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQzlEO0lBQ0gsQ0FBQztJQUVELDJEQUEyRDtJQUMzRCwwQkFBUSxHQUFSLFVBQVMsR0FBUTtRQUNmLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFRCw0Q0FBNEM7SUFDNUMsd0JBQU0sR0FBTixVQUFPLFNBQXdCLEVBQUUsSUFBaUI7UUFDaEQsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFDLENBQUM7WUFDbEIs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

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
var exports = __webpack_exports__;
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
var spawner_1 = __webpack_require__(/*! ./classes/spawner */ "./src/classes/spawner.ts");
var spawner = new spawner_1.Spawner(document.body);
var store = spawner.store({
    text: "hi!",
});
store.createState({ number: 0 });
var state = store.state;
spawner
    .create([])
    .append([], { type: "p", innerText: state.number })
    .append([], {
    innerText: "Click me",
    type: "button",
    onclick: function () {
        store.setState({ text: "texty" });
    },
})
    .append([], { innerText: "I'm some boring text", type: "p" })
    .nest(spawner.create([], { type: "ul" }).append([], ["List 1", "List 2", "List 3"].map(function (li) { return ({
    type: "li",
    innerText: li,
}); })))
    .renderAt(document.body);
var cb = function (state) {
    return state + 1;
};
store.setState({ number: 1 });
store.computeState(state.number, cb);
setInterval(function () {
    store.computeState(state.number, cb);
}, 1000);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBNEM7QUFFNUMsSUFBTSxPQUFPLEdBQUcsSUFBSSxpQkFBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUUzQyxJQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO0lBQzFCLElBQUksRUFBRSxLQUFLO0NBQ1osQ0FBQyxDQUFDO0FBRUgsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRXpCLElBQUEsS0FBSyxHQUFLLEtBQUssTUFBVixDQUFXO0FBRXhCLE9BQU87S0FDSixNQUFNLENBQUMsRUFBRSxDQUFDO0tBQ1YsTUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztLQUNsRCxNQUFNLENBQUMsRUFBRSxFQUFFO0lBQ1YsU0FBUyxFQUFFLFVBQVU7SUFDckIsSUFBSSxFQUFFLFFBQVE7SUFDZCxPQUFPLEVBQUU7UUFDUCxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDcEMsQ0FBQztDQUNGLENBQUM7S0FDRCxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLHNCQUFzQixFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQztLQUM1RCxJQUFJLENBQ0gsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQ3ZDLEVBQUUsRUFDRixDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUMsRUFBRSxJQUFLLE9BQUEsQ0FBQztJQUMxQyxJQUFJLEVBQUUsSUFBSTtJQUNWLFNBQVMsRUFBRSxFQUFFO0NBQ2QsQ0FBQyxFQUh5QyxDQUd6QyxDQUFDLENBQ0osQ0FDRjtLQUNBLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7QUFFM0IsSUFBTSxFQUFFLEdBQUcsVUFBQyxLQUFLO0lBQ2YsT0FBTyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQ25CLENBQUMsQ0FBQztBQUVGLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUM5QixLQUFLLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFFckMsV0FBVyxDQUFDO0lBQ1YsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyJ9
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,