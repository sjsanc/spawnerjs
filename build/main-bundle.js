/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/spawner.ts":
/*!************************!*\
  !*** ./src/spawner.ts ***!
  \************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Spawner = void 0;
var Spawner = /** @class */ (function () {
    function Spawner() {
        this._context = null;
        this._buildList = [];
        this._store = [];
        this._proxyTarget = {};
        this._proxy = new Proxy(this._proxyTarget, {});
    }
    Spawner.prototype.create = function (options) {
        this._context = null;
        this._context = this._create(options);
        return this;
    };
    Spawner.prototype._create = function (options) {
        var element = options["type"]
            ? document.createElement(options["type"])
            : document.createElement("div");
        Object.entries(options).map(function (_a) {
            var key = _a[0], val = _a[1];
            key !== "type" ? (element[key.toString()] = val) : null;
        });
        if (typeof options["ref"] == "string") {
            var reference = options["ref"];
            this._store.push({ reference: reference, element: element });
        }
        return element;
    };
    Spawner.prototype.insertInto = function (target) {
        var _this = this;
        if (this._buildList.length > 0) {
            this._buildList.forEach(function (x) {
                _this._context.append(x);
            });
        }
        target.append(this._context);
        var tempContext = this._context;
        this._context = null;
        this._buildList = [];
        return tempContext;
    };
    Spawner.prototype.append = function (options) {
        this._buildList.push(this._create(options));
        return this;
    };
    Spawner.prototype.get = function (ref) {
        var element = this._getRef(ref);
        if (this._getRef(ref)) {
            return element.element;
        }
        else {
            return undefined;
        }
    };
    Spawner.prototype._getRef = function (ref) {
        return this._store.find(function (x) { return x.reference == ref; }) || null;
    };
    Spawner.prototype.register = function (cb, ref) {
        var elem = typeof ref == "string" ? this._getRef(ref).element : ref;
        if (elem !== "undefined") {
            var observer = new MutationObserver(function (mutations) {
                mutations.forEach(function (mutation) {
                    cb();
                });
            });
            observer.observe(elem, {
                characterData: false,
                attributes: true,
                childList: true,
                subtree: false,
            });
        }
    };
    return Spawner;
}());
exports.Spawner = Spawner;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bhd25lci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zcGF3bmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUtBO0lBT0U7UUFDRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELHdCQUFNLEdBQU4sVUFBTyxPQUE2QjtRQUNsQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdEMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU8seUJBQU8sR0FBZixVQUFnQixPQUE2QjtRQUMzQyxJQUFNLE9BQU8sR0FBZ0IsT0FBTyxDQUFDLE1BQU0sQ0FBQztZQUMxQyxDQUFDLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDekMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFbEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQyxFQUFVO2dCQUFULEdBQUcsUUFBQSxFQUFFLEdBQUcsUUFBQTtZQUNwQyxHQUFHLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzFELENB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

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
var exports = __webpack_exports__;
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
var spawner_1 = __webpack_require__(/*! ./spawner */ "./src/spawner.ts");
// const newEl = new U.element("div", { innerText: "LOL" }).append(document.body);
var spawner = new spawner_1.Spawner();
spawner
    .create({ innerText: "I'm a div" })
    .append({ innerText: "I'm a header", type: "h1" })
    .append({ innerText: "I'm some boring text", type: "p", ref: "pRef" })
    .insertInto(document.body);
spawner.register(function () {
    console.log("Something about this element changed!");
}, "pRef");
spawner.get("pRef").classList.add("cls"); // "Something about..."
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBb0M7QUFFcEMsa0ZBQWtGO0FBRWxGLElBQU0sT0FBTyxHQUFHLElBQUksaUJBQU8sRUFBRSxDQUFDO0FBRTlCLE9BQU87S0FDSixNQUFNLENBQUMsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLENBQUM7S0FDbEMsTUFBTSxDQUFDLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUM7S0FDakQsTUFBTSxDQUFDLEVBQUUsU0FBUyxFQUFFLHNCQUFzQixFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDO0tBQ3JFLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7QUFFN0IsT0FBTyxDQUFDLFFBQVEsQ0FBQztJQUNmLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUNBQXVDLENBQUMsQ0FBQztBQUN2RCxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFFWCxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyx1QkFBdUIifQ==
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcGF3bmVyanMvLi9zcmMvc3Bhd25lci50cyIsIndlYnBhY2s6Ly9zcGF3bmVyanMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vc3Bhd25lcmpzLy4vc3JjL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBYTtBQUNiLDhDQUE2QyxDQUFDLGNBQWMsRUFBQztBQUM3RCxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFEO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSw4QkFBOEIseUNBQXlDO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLDJCQUEyQixFQUFFO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxlQUFlO0FBQ2YsMkNBQTJDLCsxRzs7Ozs7O1VDOUUzQztVQUNBOztVQUVBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBOztVQUVBO1VBQ0E7O1VBRUE7VUFDQTtVQUNBOzs7Ozs7Ozs7O0FDdEJhO0FBQ2IsOENBQTZDLENBQUMsY0FBYyxFQUFDO0FBQzdELGdCQUFnQixtQkFBTyxDQUFDLG1DQUFXO0FBQ25DLHVDQUF1QyxtQkFBbUI7QUFDMUQ7QUFDQTtBQUNBLGFBQWEseUJBQXlCO0FBQ3RDLGFBQWEsd0NBQXdDO0FBQ3JELGFBQWEsNERBQTREO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCx5Q0FBeUM7QUFDekMsMkNBQTJDLG16QiIsImZpbGUiOiJtYWluLWJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TcGF3bmVyID0gdm9pZCAwO1xudmFyIFNwYXduZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3Bhd25lcigpIHtcbiAgICAgICAgdGhpcy5fY29udGV4dCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2J1aWxkTGlzdCA9IFtdO1xuICAgICAgICB0aGlzLl9zdG9yZSA9IFtdO1xuICAgICAgICB0aGlzLl9wcm94eVRhcmdldCA9IHt9O1xuICAgICAgICB0aGlzLl9wcm94eSA9IG5ldyBQcm94eSh0aGlzLl9wcm94eVRhcmdldCwge30pO1xuICAgIH1cbiAgICBTcGF3bmVyLnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB0aGlzLl9jb250ZXh0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY29udGV4dCA9IHRoaXMuX2NyZWF0ZShvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBTcGF3bmVyLnByb3RvdHlwZS5fY3JlYXRlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBvcHRpb25zW1widHlwZVwiXVxuICAgICAgICAgICAgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG9wdGlvbnNbXCJ0eXBlXCJdKVxuICAgICAgICAgICAgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhvcHRpb25zKS5tYXAoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0gX2FbMF0sIHZhbCA9IF9hWzFdO1xuICAgICAgICAgICAga2V5ICE9PSBcInR5cGVcIiA/IChlbGVtZW50W2tleS50b1N0cmluZygpXSA9IHZhbCkgOiBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zW1wicmVmXCJdID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHZhciByZWZlcmVuY2UgPSBvcHRpb25zW1wicmVmXCJdO1xuICAgICAgICAgICAgdGhpcy5fc3RvcmUucHVzaCh7IHJlZmVyZW5jZTogcmVmZXJlbmNlLCBlbGVtZW50OiBlbGVtZW50IH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH07XG4gICAgU3Bhd25lci5wcm90b3R5cGUuaW5zZXJ0SW50byA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX2J1aWxkTGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLl9idWlsZExpc3QuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgIF90aGlzLl9jb250ZXh0LmFwcGVuZCh4KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRhcmdldC5hcHBlbmQodGhpcy5fY29udGV4dCk7XG4gICAgICAgIHZhciB0ZW1wQ29udGV4dCA9IHRoaXMuX2NvbnRleHQ7XG4gICAgICAgIHRoaXMuX2NvbnRleHQgPSBudWxsO1xuICAgICAgICB0aGlzLl9idWlsZExpc3QgPSBbXTtcbiAgICAgICAgcmV0dXJuIHRlbXBDb250ZXh0O1xuICAgIH07XG4gICAgU3Bhd25lci5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fYnVpbGRMaXN0LnB1c2godGhpcy5fY3JlYXRlKG9wdGlvbnMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBTcGF3bmVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5fZ2V0UmVmKHJlZik7XG4gICAgICAgIGlmICh0aGlzLl9nZXRSZWYocmVmKSkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuZWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNwYXduZXIucHJvdG90eXBlLl9nZXRSZWYgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdG9yZS5maW5kKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4LnJlZmVyZW5jZSA9PSByZWY7IH0pIHx8IG51bGw7XG4gICAgfTtcbiAgICBTcGF3bmVyLnByb3RvdHlwZS5yZWdpc3RlciA9IGZ1bmN0aW9uIChjYiwgcmVmKSB7XG4gICAgICAgIHZhciBlbGVtID0gdHlwZW9mIHJlZiA9PSBcInN0cmluZ1wiID8gdGhpcy5fZ2V0UmVmKHJlZikuZWxlbWVudCA6IHJlZjtcbiAgICAgICAgaWYgKGVsZW0gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHZhciBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uIChtdXRhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBtdXRhdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAobXV0YXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgY2IoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShlbGVtLCB7XG4gICAgICAgICAgICAgICAgY2hhcmFjdGVyRGF0YTogZmFsc2UsXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlczogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgc3VidHJlZTogZmFsc2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFNwYXduZXI7XG59KCkpO1xuZXhwb3J0cy5TcGF3bmVyID0gU3Bhd25lcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWMzQmhkMjVsY2k1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1TDNOeVl5OXpjR0YzYm1WeUxuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenRCUVV0Qk8wbEJUMFU3VVVGRFJTeEpRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJRenRSUVVOeVFpeEpRVUZKTEVOQlFVTXNWVUZCVlN4SFFVRkhMRVZCUVVVc1EwRkJRenRSUVVOeVFpeEpRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRVZCUVVVc1EwRkJRenRSUVVOcVFpeEpRVUZKTEVOQlFVTXNXVUZCV1N4SFFVRkhMRVZCUVVVc1EwRkJRenRSUVVOMlFpeEpRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRWxCUVVrc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eFpRVUZaTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNN1NVRkRha1FzUTBGQlF6dEpRVVZFTEhkQ1FVRk5MRWRCUVU0c1ZVRkJUeXhQUVVFMlFqdFJRVU5zUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hIUVVGSExFbEJRVWtzUTBGQlF6dFJRVU55UWl4SlFVRkpMRU5CUVVNc1VVRkJVU3hIUVVGSExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1VVRkRkRU1zVDBGQlR5eEpRVUZKTEVOQlFVTTdTVUZEWkN4RFFVRkRPMGxCUlU4c2VVSkJRVThzUjBGQlppeFZRVUZuUWl4UFFVRTJRanRSUVVNelF5eEpRVUZOTEU5QlFVOHNSMEZCWjBJc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF6dFpRVU14UXl4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1dVRkRla01zUTBGQlF5eERRVUZETEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03VVVGRmJFTXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNWVUZCUXl4RlFVRlZPMmRDUVVGVUxFZEJRVWNzVVVGQlFTeEZRVUZGTEVkQlFVY3NVVUZCUVR0WlFVTndReXhIUVVGSExFdEJRVXNzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTXNSMEZCUnl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETzFGQlF6RkVMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJSVWdzU1VGQlNTeFBRVUZQTEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hSUVVGUkxFVkJRVVU3V1VGRGNrTXNTVUZCU1N4VFFVRlRMRWRCUVZjc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzFsQlEzWkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNVMEZCVXl4WFFVRkJMRVZCUVVVc1QwRkJUeXhUUVVGQkxFVkJRVVVzUTBGQlF5eERRVUZETzFOQlF6RkRPMUZCUlVRc1QwRkJUeXhQUVVGUExFTkJRVU03U1VGRGFrSXNRMEZCUXp0SlFVVkVMRFJDUVVGVkxFZEJRVllzVlVGQlZ5eE5RVUZsTzFGQlFURkNMR2xDUVZsRE8xRkJXRU1zU1VGQlNTeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFVkJRVVU3V1VGRE9VSXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlF5eERRVUZETzJkQ1FVTjRRaXhMUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNeFFpeERRVUZETEVOQlFVTXNRMEZCUXp0VFFVTktPMUZCUTBRc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1VVRkZOMElzU1VGQlNTeFhRVUZYTEVkQlFVY3NTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJRenRSUVVOb1F5eEpRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJRenRSUVVOeVFpeEpRVUZKTEVOQlFVTXNWVUZCVlN4SFFVRkhMRVZCUVVVc1EwRkJRenRSUVVOeVFpeFBRVUZQTEZkQlFWY3NRMEZCUXp0SlFVTnlRaXhEUVVGRE8wbEJSVVFzZDBKQlFVMHNSMEZCVGl4VlFVRlBMRTlCUVRSQ08xRkJRMnBETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVNMVF5eFBRVUZQTEVsQlFVa3NRMEZCUXp0SlFVTmtMRU5CUVVNN1NVRkZSQ3h4UWtGQlJ5eEhRVUZJTEZWQlFVa3NSMEZCVnp0UlFVTmlMRWxCUVUwc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkRiRU1zU1VGQlNTeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRk8xbEJRM0pDTEU5QlFVOHNUMEZCVHl4RFFVRkRMRTlCUVU4c1EwRkJRenRUUVVONFFqdGhRVUZOTzFsQlEwd3NUMEZCVHl4VFFVRlRMRU5CUVVNN1UwRkRiRUk3U1VGRFNDeERRVUZETzBsQlJVOHNlVUpCUVU4c1IwRkJaaXhWUVVGblFpeEhRVUZYTzFGQlEzcENMRTlCUVU4c1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCUXl4RFFVRkRMRWxCUVVzc1QwRkJRU3hEUVVGRExFTkJRVU1zVTBGQlV5eEpRVUZKTEVkQlFVY3NSVUZCYkVJc1EwRkJhMElzUTBGQlF5eEpRVUZKTEVsQlFVa3NRMEZCUXp0SlFVTTNSQ3hEUVVGRE8wbEJSVVFzTUVKQlFWRXNSMEZCVWl4VlFVRlRMRVZCUVU4c1JVRkJSU3hIUVVGUk8xRkJRM2hDTEVsQlFVMHNTVUZCU1N4SFFVRkhMRTlCUVU4c1IwRkJSeXhKUVVGSkxGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJRenRSUVVOMFJTeEpRVUZKTEVsQlFVa3NTMEZCU3l4WFFVRlhMRVZCUVVVN1dVRkRlRUlzU1VGQlRTeFJRVUZSTEVkQlFVY3NTVUZCU1N4blFrRkJaMElzUTBGQlF5eFZRVUZWTEZOQlFWTTdaMEpCUTNaRUxGTkJRVk1zUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCUXl4UlFVRlJPMjlDUVVONlFpeEZRVUZGTEVWQlFVVXNRMEZCUXp0blFrRkRVQ3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5NTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTBnc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVWQlFVVTdaMEpCUTNKQ0xHRkJRV0VzUlVGQlJTeExRVUZMTzJkQ1FVTndRaXhWUVVGVkxFVkJRVVVzU1VGQlNUdG5Ra0ZEYUVJc1UwRkJVeXhGUVVGRkxFbEJRVWs3WjBKQlEyWXNUMEZCVHl4RlFVRkZMRXRCUVVzN1lVRkRaaXhEUVVGRExFTkJRVU03VTBGRFNqdEpRVU5JTEVOQlFVTTdTVUZEU0N4alFVRkRPMEZCUVVRc1EwRkJReXhCUVhSR1JDeEpRWE5HUXp0QlFYUkdXU3d3UWtGQlR5SjkiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgc3Bhd25lcl8xID0gcmVxdWlyZShcIi4vc3Bhd25lclwiKTtcbi8vIGNvbnN0IG5ld0VsID0gbmV3IFUuZWxlbWVudChcImRpdlwiLCB7IGlubmVyVGV4dDogXCJMT0xcIiB9KS5hcHBlbmQoZG9jdW1lbnQuYm9keSk7XG52YXIgc3Bhd25lciA9IG5ldyBzcGF3bmVyXzEuU3Bhd25lcigpO1xuc3Bhd25lclxuICAgIC5jcmVhdGUoeyBpbm5lclRleHQ6IFwiSSdtIGEgZGl2XCIgfSlcbiAgICAuYXBwZW5kKHsgaW5uZXJUZXh0OiBcIkknbSBhIGhlYWRlclwiLCB0eXBlOiBcImgxXCIgfSlcbiAgICAuYXBwZW5kKHsgaW5uZXJUZXh0OiBcIkknbSBzb21lIGJvcmluZyB0ZXh0XCIsIHR5cGU6IFwicFwiLCByZWY6IFwicFJlZlwiIH0pXG4gICAgLmluc2VydEludG8oZG9jdW1lbnQuYm9keSk7XG5zcGF3bmVyLnJlZ2lzdGVyKGZ1bmN0aW9uICgpIHtcbiAgICBjb25zb2xlLmxvZyhcIlNvbWV0aGluZyBhYm91dCB0aGlzIGVsZW1lbnQgY2hhbmdlZCFcIik7XG59LCBcInBSZWZcIik7XG5zcGF3bmVyLmdldChcInBSZWZcIikuY2xhc3NMaXN0LmFkZChcImNsc1wiKTsgLy8gXCJTb21ldGhpbmcgYWJvdXQuLi5cIlxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOXpjbU12YVc1a1pYZ3VkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3UVVGQlFTeHhRMEZCYjBNN1FVRkZjRU1zYTBaQlFXdEdPMEZCUld4R0xFbEJRVTBzVDBGQlR5eEhRVUZITEVsQlFVa3NhVUpCUVU4c1JVRkJSU3hEUVVGRE8wRkJSVGxDTEU5QlFVODdTMEZEU2l4TlFVRk5MRU5CUVVNc1JVRkJSU3hUUVVGVExFVkJRVVVzVjBGQlZ5eEZRVUZGTEVOQlFVTTdTMEZEYkVNc1RVRkJUU3hEUVVGRExFVkJRVVVzVTBGQlV5eEZRVUZGTEdOQlFXTXNSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFTkJRVU03UzBGRGFrUXNUVUZCVFN4RFFVRkRMRVZCUVVVc1UwRkJVeXhGUVVGRkxITkNRVUZ6UWl4RlFVRkZMRWxCUVVrc1JVRkJSU3hIUVVGSExFVkJRVVVzUjBGQlJ5eEZRVUZGTEUxQlFVMHNSVUZCUlN4RFFVRkRPMHRCUTNKRkxGVkJRVlVzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkZOMElzVDBGQlR5eERRVUZETEZGQlFWRXNRMEZCUXp0SlFVTm1MRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zZFVOQlFYVkRMRU5CUVVNc1EwRkJRenRCUVVOMlJDeERRVUZETEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkZXQ3hQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4MVFrRkJkVUlpZlE9PSJdLCJzb3VyY2VSb290IjoiIn0=